{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yaoyuan/Desktop/student/src/page/Doctor/dashboard/dashboard.js\";\nimport React from 'react';\nimport { HashRouter as Router, withRouter } from 'react-router-dom';\nimport './dashboard.scss';\nimport { Table, Button, Input, Modal, Select, message, Checkbox } from 'antd';\nconst {\n  Option\n} = Select;\n\nconst success = msg => {\n  message.success(msg);\n};\n\nconst echarts = require(\"echarts\"); // const fetch = require('cross-fetch');\n\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      donutGraph: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ecdonut\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 19\n      }, this)\n    };\n  }\n\n  componentDidMount() {\n    var theme = {\n      color: [\"#26B99A\", \"#34495E\", \"#BDC3C7\", \"#3498DB\", \"#9B59B6\", \"#8abb6f\", \"#759c6a\", \"#bfd3b7\"],\n      title: {\n        itemGap: 8,\n        textStyle: {\n          fontWeight: \"normal\",\n          color: \"#408829\"\n        }\n      },\n      dataRange: {\n        color: [\"#1f610a\", \"#97b58d\"]\n      },\n      toolbox: {\n        color: [\"#408829\", \"#408829\", \"#408829\", \"#408829\"]\n      },\n      tooltip: {\n        backgroundColor: \"rgba(0,0,0,0.5)\",\n        axisPointer: {\n          type: \"line\",\n          lineStyle: {\n            color: \"#408829\",\n            type: \"dashed\"\n          },\n          crossStyle: {\n            color: \"#408829\"\n          },\n          shadowStyle: {\n            color: \"rgba(200,200,200,0.3)\"\n          }\n        }\n      },\n      dataZoom: {\n        dataBackgroundColor: \"#eee\",\n        fillerColor: \"rgba(64,136,41,0.2)\",\n        handleColor: \"#408829\"\n      },\n      grid: {\n        borderWidth: 0\n      },\n      categoryAxis: {\n        axisLine: {\n          lineStyle: {\n            color: \"#408829\"\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: [\"#eee\"]\n          }\n        }\n      },\n      valueAxis: {\n        axisLine: {\n          lineStyle: {\n            color: \"#408829\"\n          }\n        },\n        splitArea: {\n          show: true,\n          areaStyle: {\n            color: [\"rgba(250,250,250,0.1)\", \"rgba(200,200,200,0.1)\"]\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: [\"#eee\"]\n          }\n        }\n      },\n      timeline: {\n        lineStyle: {\n          color: \"#408829\"\n        },\n        controlStyle: {\n          normal: {\n            color: \"#408829\"\n          },\n          emphasis: {\n            color: \"#408829\"\n          }\n        }\n      },\n      k: {\n        itemStyle: {\n          normal: {\n            color: \"#68a54a\",\n            color0: \"#a9cba2\",\n            lineStyle: {\n              width: 1,\n              color: \"#408829\",\n              color0: \"#86b379\"\n            }\n          }\n        }\n      },\n      map: {\n        itemStyle: {\n          normal: {\n            areaStyle: {\n              color: \"#ddd\"\n            },\n            label: {\n              textStyle: {\n                color: \"#c12e34\"\n              }\n            }\n          },\n          emphasis: {\n            areaStyle: {\n              color: \"#99d2dd\"\n            },\n            label: {\n              textStyle: {\n                color: \"#c12e34\"\n              }\n            }\n          }\n        }\n      },\n      force: {\n        itemStyle: {\n          normal: {\n            linkStyle: {\n              strokeColor: \"#408829\"\n            }\n          }\n        }\n      },\n      chord: {\n        padding: 4,\n        itemStyle: {\n          normal: {\n            lineStyle: {\n              width: 1,\n              color: \"rgba(128, 128, 128, 0.5)\"\n            },\n            chordStyle: {\n              lineStyle: {\n                width: 1,\n                color: \"rgba(128, 128, 128, 0.5)\"\n              }\n            }\n          },\n          emphasis: {\n            lineStyle: {\n              width: 1,\n              color: \"rgba(128, 128, 128, 0.5)\"\n            },\n            chordStyle: {\n              lineStyle: {\n                width: 1,\n                color: \"rgba(128, 128, 128, 0.5)\"\n              }\n            }\n          }\n        }\n      },\n      gauge: {\n        startAngle: 225,\n        endAngle: -45,\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: [[0.2, \"#86b379\"], [0.8, \"#68a54a\"], [1, \"#408829\"]],\n            width: 8\n          }\n        },\n        axisTick: {\n          splitNumber: 10,\n          length: 12,\n          lineStyle: {\n            color: \"auto\"\n          }\n        },\n        axisLabel: {\n          textStyle: {\n            color: \"auto\"\n          }\n        },\n        splitLine: {\n          length: 18,\n          lineStyle: {\n            color: \"auto\"\n          }\n        },\n        pointer: {\n          length: \"90%\",\n          color: \"auto\"\n        },\n        title: {\n          textStyle: {\n            color: \"#333\"\n          }\n        },\n        detail: {\n          textStyle: {\n            color: \"auto\"\n          }\n        }\n      },\n      textStyle: {\n        fontFamily: \"Arial, Verdana, sans-serif\"\n      }\n    };\n    var ecd = echarts.init(document.getElementById(\"ecdonut\"), theme);\n    ecd.showLoading();\n    ecd.setOption({\n      tooltip: {\n        trigger: \"item\",\n        formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n      },\n      calculable: true,\n      legend: {\n        x: \"center\",\n        y: \"bottom\",\n        data: [\"Positive patients\", \"Patients in quarantine\"]\n      },\n      toolbox: {\n        show: false,\n        feature: {\n          magicType: {\n            show: true,\n            type: [\"pie\", \"funnel\"],\n            option: {\n              funnel: {\n                x: \"25%\",\n                width: \"50%\",\n                funnelAlign: \"center\",\n                max: 1548\n              }\n            }\n          },\n          restore: {\n            show: false,\n            title: \"Restore\"\n          },\n          saveAsImage: {\n            show: false,\n            title: \"Save Image\"\n          }\n        }\n      },\n      series: [{\n        name: \"Overall Patient Status\",\n        type: \"pie\",\n        radius: [\"35%\", \"55%\"],\n        itemStyle: {\n          normal: {\n            label: {\n              show: true,\n              textStyle: {\n                fontSize: \"10\"\n              }\n            },\n            labelLine: {\n              show: true\n            }\n          },\n          emphasis: {\n            label: {\n              show: true,\n              position: \"center\",\n              textStyle: {\n                fontSize: \"11\",\n                fontWeight: \"normal\"\n              }\n            }\n          }\n        },\n        data: [{\n          value: 5,\n          name: \"Positive patients\"\n        }, {\n          value: 10,\n          name: \"Patients in quarantine\"\n        }]\n      }]\n    }); // let endpoint = \"/home/dashboard\";\n    // fetch(endpoint)\n    //   .then(response => {\n    //     if (response.status !== 200) {\n    //       return;\n    //     }\n    //     return response.json();\n    //   })\n    //   .then(data => {\n    //     let countOver = 0;\n    //     let countUnder = 0;\n    //     for (let entry of data) {\n    //       if (entry.rate >= 80) {\n    //         countOver = countOver + 1;\n    //       } else {\n    //         countUnder = countUnder + 1;\n    //       }\n    //     }\n    //     var ecd = echarts.init(document.getElementById(\"ecdonut\"), theme);\n    //     ecd.showLoading();\n    //     ecd.setOption({\n    //       tooltip: {\n    //         trigger: \"item\",\n    //         formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n    //       },\n    //       calculable: true,\n    //       legend: {\n    //         x: \"center\",\n    //         y: \"bottom\",\n    //         data: [\"Positive patients\", \"Patients in quarantine\"]\n    //       },\n    //       toolbox: {\n    //         show: false,\n    //         feature: {\n    //           magicType: {\n    //             show: true,\n    //             type: [\"pie\", \"funnel\"],\n    //             option: {\n    //               funnel: {\n    //                 x: \"25%\",\n    //                 width: \"50%\",\n    //                 funnelAlign: \"center\",\n    //                 max: 1548\n    //               }\n    //             }\n    //           },\n    //           restore: {\n    //             show: false,\n    //             title: \"Restore\"\n    //           },\n    //           saveAsImage: {\n    //             show: false,\n    //             title: \"Save Image\"\n    //           }\n    //         }\n    //       },\n    //       series: [\n    //         {\n    //           name: \"Overall Patient Status\",\n    //           type: \"pie\",\n    //           radius: [\"35%\", \"55%\"],\n    //           itemStyle: {\n    //             normal: {\n    //               label: {\n    //                 show: true,\n    //                 textStyle: {\n    //                   fontSize: \"10\"\n    //                 }\n    //               },\n    //               labelLine: {\n    //                 show: true\n    //               }\n    //             },\n    //             emphasis: {\n    //               label: {\n    //                 show: true,\n    //                 position: \"center\",\n    //                 textStyle: {\n    //                   fontSize: \"11\",\n    //                   fontWeight: \"normal\"\n    //                 }\n    //               }\n    //             }\n    //           },\n    //           data: [\n    //             {\n    //               value: countOver,\n    //               name: \"Reaching goals\"\n    //             },\n    //             {\n    //               value: countUnder,\n    //               name: \"Not reaching goals\"\n    //             }\n    //           ]\n    //         }\n    //       ]\n    //     });\n    //     return ecd;\n    //   })\n    //   .then(ecd => {\n    //     ecd.hideLoading();\n    //   })\n    //   .catch(err => {});\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // <div className=\"dashboard\">\n      //   <div className=\"x_panel\">\n      //     <div className=\"x_title donut\">\n      //       <h2>Overall Patient Status</h2>\n      //       <div className=\"clearfix\" />\n      //     </div>\n      //     <div className=\"x_content\">\n      //       {this.state.donutGraph}\n      //       <p>\n      //         <i>\n      //           Patients\n      //         </i>\n      //       </p>\n      //     </div>\n      //   </div>\n      // </div>\n      _jsxDEV(\"div\", {\n        children: this.state.donutGraph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}\n\nexport default _c = withRouter(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/yaoyuan/Desktop/student/src/page/Doctor/dashboard/dashboard.js"],"names":["React","HashRouter","Router","withRouter","Table","Button","Input","Modal","Select","message","Checkbox","Option","success","msg","echarts","require","Dashboard","Component","constructor","props","state","donutGraph","componentDidMount","theme","color","title","itemGap","textStyle","fontWeight","dataRange","toolbox","tooltip","backgroundColor","axisPointer","type","lineStyle","crossStyle","shadowStyle","dataZoom","dataBackgroundColor","fillerColor","handleColor","grid","borderWidth","categoryAxis","axisLine","splitLine","valueAxis","splitArea","show","areaStyle","timeline","controlStyle","normal","emphasis","k","itemStyle","color0","width","map","label","force","linkStyle","strokeColor","chord","padding","chordStyle","gauge","startAngle","endAngle","axisTick","splitNumber","length","axisLabel","pointer","detail","fontFamily","ecd","init","document","getElementById","showLoading","setOption","trigger","formatter","calculable","legend","x","y","data","feature","magicType","option","funnel","funnelAlign","max","restore","saveAsImage","series","name","radius","fontSize","labelLine","position","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HashRouter as Router, withRouter } from 'react-router-dom';\nimport './dashboard.scss';\nimport { Table, Button, Input, Modal, Select, message, Checkbox } from 'antd';\nconst { Option } = Select;\nconst success = (msg) => {\n  message.success(msg);\n};\nconst echarts = require(\"echarts\");\n// const fetch = require('cross-fetch');\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      donutGraph: <div id=\"ecdonut\" />\n    };\n  }\n  componentDidMount() {\n    var theme = {\n      color: [\n        \"#26B99A\",\n        \"#34495E\",\n        \"#BDC3C7\",\n        \"#3498DB\",\n        \"#9B59B6\",\n        \"#8abb6f\",\n        \"#759c6a\",\n        \"#bfd3b7\"\n      ],\n\n      title: {\n        itemGap: 8,\n        textStyle: {\n          fontWeight: \"normal\",\n          color: \"#408829\"\n        }\n      },\n\n      dataRange: {\n        color: [\"#1f610a\", \"#97b58d\"]\n      },\n\n      toolbox: {\n        color: [\"#408829\", \"#408829\", \"#408829\", \"#408829\"]\n      },\n\n      tooltip: {\n        backgroundColor: \"rgba(0,0,0,0.5)\",\n        axisPointer: {\n          type: \"line\",\n          lineStyle: {\n            color: \"#408829\",\n            type: \"dashed\"\n          },\n          crossStyle: {\n            color: \"#408829\"\n          },\n          shadowStyle: {\n            color: \"rgba(200,200,200,0.3)\"\n          }\n        }\n      },\n\n      dataZoom: {\n        dataBackgroundColor: \"#eee\",\n        fillerColor: \"rgba(64,136,41,0.2)\",\n        handleColor: \"#408829\"\n      },\n      grid: {\n        borderWidth: 0\n      },\n\n      categoryAxis: {\n        axisLine: {\n          lineStyle: {\n            color: \"#408829\"\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: [\"#eee\"]\n          }\n        }\n      },\n\n      valueAxis: {\n        axisLine: {\n          lineStyle: {\n            color: \"#408829\"\n          }\n        },\n        splitArea: {\n          show: true,\n          areaStyle: {\n            color: [\"rgba(250,250,250,0.1)\", \"rgba(200,200,200,0.1)\"]\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: [\"#eee\"]\n          }\n        }\n      },\n      timeline: {\n        lineStyle: {\n          color: \"#408829\"\n        },\n        controlStyle: {\n          normal: { color: \"#408829\" },\n          emphasis: { color: \"#408829\" }\n        }\n      },\n\n      k: {\n        itemStyle: {\n          normal: {\n            color: \"#68a54a\",\n            color0: \"#a9cba2\",\n            lineStyle: {\n              width: 1,\n              color: \"#408829\",\n              color0: \"#86b379\"\n            }\n          }\n        }\n      },\n      map: {\n        itemStyle: {\n          normal: {\n            areaStyle: {\n              color: \"#ddd\"\n            },\n            label: {\n              textStyle: {\n                color: \"#c12e34\"\n              }\n            }\n          },\n          emphasis: {\n            areaStyle: {\n              color: \"#99d2dd\"\n            },\n            label: {\n              textStyle: {\n                color: \"#c12e34\"\n              }\n            }\n          }\n        }\n      },\n      force: {\n        itemStyle: {\n          normal: {\n            linkStyle: {\n              strokeColor: \"#408829\"\n            }\n          }\n        }\n      },\n      chord: {\n        padding: 4,\n        itemStyle: {\n          normal: {\n            lineStyle: {\n              width: 1,\n              color: \"rgba(128, 128, 128, 0.5)\"\n            },\n            chordStyle: {\n              lineStyle: {\n                width: 1,\n                color: \"rgba(128, 128, 128, 0.5)\"\n              }\n            }\n          },\n          emphasis: {\n            lineStyle: {\n              width: 1,\n              color: \"rgba(128, 128, 128, 0.5)\"\n            },\n            chordStyle: {\n              lineStyle: {\n                width: 1,\n                color: \"rgba(128, 128, 128, 0.5)\"\n              }\n            }\n          }\n        }\n      },\n      gauge: {\n        startAngle: 225,\n        endAngle: -45,\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: [[0.2, \"#86b379\"], [0.8, \"#68a54a\"], [1, \"#408829\"]],\n            width: 8\n          }\n        },\n        axisTick: {\n          splitNumber: 10,\n          length: 12,\n          lineStyle: {\n            color: \"auto\"\n          }\n        },\n        axisLabel: {\n          textStyle: {\n            color: \"auto\"\n          }\n        },\n        splitLine: {\n          length: 18,\n          lineStyle: {\n            color: \"auto\"\n          }\n        },\n        pointer: {\n          length: \"90%\",\n          color: \"auto\"\n        },\n        title: {\n          textStyle: {\n            color: \"#333\"\n          }\n        },\n        detail: {\n          textStyle: {\n            color: \"auto\"\n          }\n        }\n      },\n      textStyle: {\n        fontFamily: \"Arial, Verdana, sans-serif\"\n      }\n    };\n\n    var ecd = echarts.init(document.getElementById(\"ecdonut\"), theme);\n        ecd.showLoading();\n        ecd.setOption({\n          tooltip: {\n            trigger: \"item\",\n            formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n          },\n          calculable: true,\n          legend: {\n            x: \"center\",\n            y: \"bottom\",\n            data: [\"Positive patients\", \"Patients in quarantine\"]\n          },\n          toolbox: {\n            show: false,\n            feature: {\n              magicType: {\n                show: true,\n                type: [\"pie\", \"funnel\"],\n                option: {\n                  funnel: {\n                    x: \"25%\",\n                    width: \"50%\",\n                    funnelAlign: \"center\",\n                    max: 1548\n                  }\n                }\n              },\n              restore: {\n                show: false,\n                title: \"Restore\"\n              },\n              saveAsImage: {\n                show: false,\n                title: \"Save Image\"\n              }\n            }\n          },\n          series: [\n            {\n              name: \"Overall Patient Status\",\n              type: \"pie\",\n              radius: [\"35%\", \"55%\"],\n              itemStyle: {\n                normal: {\n                  label: {\n                    show: true,\n                    textStyle: {\n                      fontSize: \"10\"\n                    }\n                  },\n                  labelLine: {\n                    show: true\n                  }\n                },\n                emphasis: {\n                  label: {\n                    show: true,\n                    position: \"center\",\n                    textStyle: {\n                      fontSize: \"11\",\n                      fontWeight: \"normal\"\n                    }\n                  }\n                }\n              },\n              data: [\n                {\n                  value: 5,\n                  name: \"Positive patients\"\n                },\n                {\n                  value: 10,\n                  name: \"Patients in quarantine\"\n                }\n              ]\n            }\n          ]\n        });\n\n    // let endpoint = \"/home/dashboard\";\n\n    // fetch(endpoint)\n    //   .then(response => {\n    //     if (response.status !== 200) {\n    //       return;\n    //     }\n    //     return response.json();\n    //   })\n    //   .then(data => {\n    //     let countOver = 0;\n    //     let countUnder = 0;\n    //     for (let entry of data) {\n    //       if (entry.rate >= 80) {\n    //         countOver = countOver + 1;\n    //       } else {\n    //         countUnder = countUnder + 1;\n    //       }\n    //     }\n    //     var ecd = echarts.init(document.getElementById(\"ecdonut\"), theme);\n    //     ecd.showLoading();\n    //     ecd.setOption({\n    //       tooltip: {\n    //         trigger: \"item\",\n    //         formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n    //       },\n    //       calculable: true,\n    //       legend: {\n    //         x: \"center\",\n    //         y: \"bottom\",\n    //         data: [\"Positive patients\", \"Patients in quarantine\"]\n    //       },\n    //       toolbox: {\n    //         show: false,\n    //         feature: {\n    //           magicType: {\n    //             show: true,\n    //             type: [\"pie\", \"funnel\"],\n    //             option: {\n    //               funnel: {\n    //                 x: \"25%\",\n    //                 width: \"50%\",\n    //                 funnelAlign: \"center\",\n    //                 max: 1548\n    //               }\n    //             }\n    //           },\n    //           restore: {\n    //             show: false,\n    //             title: \"Restore\"\n    //           },\n    //           saveAsImage: {\n    //             show: false,\n    //             title: \"Save Image\"\n    //           }\n    //         }\n    //       },\n    //       series: [\n    //         {\n    //           name: \"Overall Patient Status\",\n    //           type: \"pie\",\n    //           radius: [\"35%\", \"55%\"],\n    //           itemStyle: {\n    //             normal: {\n    //               label: {\n    //                 show: true,\n    //                 textStyle: {\n    //                   fontSize: \"10\"\n    //                 }\n    //               },\n    //               labelLine: {\n    //                 show: true\n    //               }\n    //             },\n    //             emphasis: {\n    //               label: {\n    //                 show: true,\n    //                 position: \"center\",\n    //                 textStyle: {\n    //                   fontSize: \"11\",\n    //                   fontWeight: \"normal\"\n    //                 }\n    //               }\n    //             }\n    //           },\n    //           data: [\n    //             {\n    //               value: countOver,\n    //               name: \"Reaching goals\"\n    //             },\n    //             {\n    //               value: countUnder,\n    //               name: \"Not reaching goals\"\n    //             }\n    //           ]\n    //         }\n    //       ]\n    //     });\n    //     return ecd;\n    //   })\n    //   .then(ecd => {\n    //     ecd.hideLoading();\n    //   })\n    //   .catch(err => {});\n  }\n\n  render() {\n    return (\n      // <div className=\"dashboard\">\n      //   <div className=\"x_panel\">\n      //     <div className=\"x_title donut\">\n      //       <h2>Overall Patient Status</h2>\n      //       <div className=\"clearfix\" />\n      //     </div>\n      //     <div className=\"x_content\">\n      //       {this.state.donutGraph}\n      //       <p>\n      //         <i>\n      //           Patients\n      //         </i>\n      //       </p>\n      //     </div>\n      //   </div>\n      // </div>\n        <div>\n          {this.state.donutGraph}\n        </div>\n\n    );\n  }\n}\n\nexport default withRouter(Dashboard);"]},"metadata":{},"sourceType":"module"}